version: '3.8'

services:
  nginx:
    image: nginx:latest
    ports:
      - "${NGINX_PORT}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - upload-service
      # - query-service
    networks:
      - rag-network 

  localstack:
    image: localstack/localstack
    ports:
      - "${LOCALSTACK_PORT}:4566"
    environment:
      - SERVICES=s3,sqs
      - DEBUG=1
    volumes:
      - localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
      - ./localstack/init.sh:/etc/localstack/init/ready.d/init.sh
    networks:
      - rag-network

  upload-service:
    build: ./services/upload-service
    environment:
      - UPLOAD_SERVICE_PORT=${UPLOAD_SERVICE_PORT}
      
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}

      - S3_UPLOAD_BUCKET=${S3_UPLOAD_BUCKET}
      - PROCESSING_QUEUE_URL=${PROCESSING_QUEUE_URL}

      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      localstack:
        condition: service_healthy
    networks:
      - rag-network

  processing-service:
    build: ./services/processing-service
    environment:
      - AWS_REGION=${AWS_REGION}
      - AWS_ENDPOINT_URL=${AWS_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      
      - PROCESSING_QUEUE_URL=${PROCESSING_QUEUE_URL}
      - EMBEDDING_QUEUE_URL=${EMBEDDING_QUEUE_URL}

      - S3_UPLOAD_BUCKET=${S3_UPLOAD_BUCKET}
      - S3_PROCESSED_BUCKET=${S3_PROCESSED_BUCKET}
      
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      localstack:
        condition: service_healthy
    networks:
      - rag-network

  # embedding-service:
  #   build: ./services/embedding-service
  #   environment:
  #     - CHROMA_URL=http://chroma:8000
  #     - AWS_ENDPOINT_URL=http://localstack:4566
  #     - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  #   networks:
  #     - rag-network

  # query-service:
  #   build: ./services/query-service
  #   environment:
  #     - CHROMA_URL=http://chroma:8000
  #     - AWS_ENDPOINT_URL=http://localstack:4566
  #     - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
  #   networks:
  #     - rag-network

  frontend:
    build: ./frontend
    ports:
      - "${FRONTEND_PORT}:8501"
    depends_on:
      - nginx
    environment:
      - UPLOAD_SERVICE_URL=${UPLOAD_SERVICE_URL}
    networks:
      - rag-network

  # postgres:
  #   image: postgres:14
  #   ports:
  #     - "${POSTGRES_PORT}:5432"
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB}
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   networks:
  #     - rag-network

  # chroma:
  #   image: ghcr.io/chroma-core/chroma:latest
  #   volumes:
  #     - chroma_data:/chroma/chroma
  #   ports:
  #     - "${CHROMA_PORT}:8000"
  #   networks:
  #     - rag-network

volumes:
  chroma_data:
  postgres_data:
  localstack_data:

networks:
  rag-network:
    driver: bridge